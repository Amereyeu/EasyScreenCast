char *s = N_("Recording status indicators");
char *s = N_("Show alerts and notifications");
char *s = N_("Show a border around the area being recorded");
char *s = N_("Enable keyboard shortcut");
char *s = N_("To activate the change of the shortcut restart the extension");
char *s = N_("Shortcut combination");
char *s = N_("Draw cursor on screencast");
char *s = N_("Execute command after recording");
char *s = N_("These words will be replaced\n"
             " _fpath = the absolute path of the screencast video file.\n"
             "_dirpath = the absolute path of destination folder for the screencast video file.\n"
             "_fname = the name of the screencast video file.");
char *s = N_("Command post-recording");
char *s = N_("Both  [ESC + Default]");
char *s = N_("ESC only");
char *s = N_("Default only");
char *s = N_("not any");
char *s = N_("Options");
char *s = N_("Custom GStreamer Pipeline");
char *s = N_("No GSP description\n"
             "");
char *s = N_("PagePreset");
char *s = N_("Frames Per Second");
char *s = N_("0");
char *s = N_("GStreamer Pipeline");
char *s = N_("The extension does NOT handle the webcam and audio when you use a custom gstreamer pipeline.\n"
             "");
char *s = N_("Official doc");
char *s = N_("Wiki #1");
char *s = N_("Wiki #2");
char *s = N_("PageCustom");
char *s = N_("Quality");
char *s = N_("No webcam device selected");
char *s = N_("-");
char *s = N_("Type of unit of measure");
char *s = N_("Width");
char *s = N_("Height");
char *s = N_("Percentage");
char *s = N_("Pixel");
char *s = N_("Size");
char *s = N_("Put the webcam in the corner");
char *s = N_("Right-Bottom");
char *s = N_("Left-Bottom");
char *s = N_("Right-Top");
char *s = N_("Left-Top");
char *s = N_("Margin X");
char *s = N_("Margin Y");
char *s = N_("Alpha channel");
char *s = N_("0,00");
char *s = N_("Position");
char *s = N_("WebCam");
char *s = N_("Select the folder where the file is saved, if not specific a folder  the file will be saved in the $XDG_VIDEOS_DIR if it exists, or the home directory otherwise.");
char *s = N_("Destination folder");
/* xgettext:no-c-format */
char *s = N_("the filename which may contain some escape sequences - %d and %t will be replaced by the start date and time of the recording.");
char *s = N_("File name template");
char *s = N_("Select the destination folder");
char *s = N_("File container");
char *s = N_("File resolution");
char *s = N_("Native area resolution");
char *s = N_("Native");
char *s = N_("Preset helper");
char *s = N_("HD [720p] [16:9]");
char *s = N_("XGA [768p] [4:3]");
char *s = N_("HD ready [768p] [16:9]");
char *s = N_("SXGA [1024p] [5:4]");
char *s = N_("Full HD [1080p] [16:9]");
char *s = N_("UXGA [1200p] [4:3]");
char *s = N_("QHD [1440p] [16:9]");
char *s = N_("QSXGA [2048p] [5:4]");
char *s = N_("4K [2160p] [16:9]");
char *s = N_("Preset");
char *s = N_("keep original aspect ratio");
char *s = N_("Custom");
char *s = N_("File");
char *s = N_("This option enable more debug message, to view these run this command into a terminal:\n"
             "$ journalctl --since=today --no-pager | grep js\n"
             "$ dbus-monitor \"interface=org.gnome.Shell.Screencast\"");
char *s = N_("Enable verbose debug");
char *s = N_("This option enable more debug message, to view these run this command into a terminal:\n"
             "$ journalctl /usr/bin/gnome-session --since=today | grep js\n"
             "$ dbus-monitor \"interface=org.gnome.Shell.Screencast\"");
char *s = N_("Get extension log");
char *s = N_("Get last GS pipeline");
char *s = N_("Get Gnome log");
char *s = N_("Restore default options");
char *s = N_("Support");
char *s = N_("EasyScreenCast");
char *s = N_("N/A");
char *s = N_("This extension simplifies the use of the \n"
             "screen recorder  included in gnome shell");
char *s = N_("This software is licensed under GPL v3");
char *s = N_("Credits");
char *s = N_("How to contribute?");
char *s = N_("With a translation");
char *s = N_("Reporting bugs");
char *s = N_("Add code");
char *s = N_("Info");
